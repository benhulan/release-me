<!DOCTYPE html>
<html lang="en">

<head>
  <% include ../partials/header.ejs %>
</head>

<body>
  <% include ../partials/nav.ejs %>


<div class="container">
  <hr>
  <div class="row" id="dashboard">
    <div class="col-md-6">
      <h3><span class="glyphicon glyphicon-dashboard"></span> Calculate your mileage:</h3>
        <form>
          <div class="form-group">
            <label for="leaseDate">Enter the End Date of your lease:</label>
            <input type="leaseDate" class="form-control" id="leaseDate" placeholder="08/01/2018">
          </div>

    <!-- <div class="checkbox">
            <label>
              <input type="checkbox"> 3 Year Lease (36 Month)
            </label>
            <label>
              <input type="checkbox"> 4 Year Lease (48 Month)
            </label>
            <label>
              <input type="checkbox"> 5 Year Lease (60 Month)
            </label>
          </div> -->

          <div class="form-group">
            <label for="currentMiles">Enter the current mileage of your leased vehicle:</label>
            <input type="currentMiles" class="form-control" id="currentMiles" placeholder="200">
          </div>
          <div class="form-group">
            <label for="targetMiles">Enter the target mileage for the end of the lease:</label>
            <input type="targetMiles" class="form-control" id="targetMiles" placeholder="15000">
          </div>

          <button type="submit" class="btn btn-default" id="submitButton">Submit</button>
        </form>
        <div class="padMe" style="padding-bottom: 10px;"></div>
    </div>
    <div class="col-md-6">

      <h3><span class="glyphicon glyphicon-list-alt"></span> Results:</h3>

<!--        <div class="alert alert-info text-center" role="alert">
        <div id="todayDate"></div>
        <div id="result"></div>
        <div id="answer"></div>
        <div id="commute"></div>
      </div> -->

<div id="pie-chart"></div>

    </div>
  </div> <!-- row -->


<script type="text/javascript">
var w = 450;
var h = 300;
var r = 100;
var ir = 45;
var textOffset = 14;
var tweenDuration = 250;

//OBJECTS TO BE POPULATED WITH DATA LATER
var lines, valueLabels, nameLabels;
var pieData = [];    
var oldPieData = [];
var filteredPieData = [];

//D3 helper function to populate pie slice parameters from array data
var donut = d3.layout.pie().value(function(d){
  return d.octetTotalCount;
});

//D3 helper function to create colors from an ordinal scale
var color = d3.scale.category20();

//D3 helper function to draw arcs, populates parameter "d" in path object
var arc = d3.svg.arc()
  .startAngle(function(d){ return d.startAngle; })
  .endAngle(function(d){ return d.endAngle; })
  .innerRadius(ir)
  .outerRadius(r);

///////////////////////////////////////////////////////////
// GENERATE FAKE DATA /////////////////////////////////////
///////////////////////////////////////////////////////////

var arrayRange = 10000; //range of potential values for each item
var arraySize;
var streakerDataAdded;

function fillArray() {
  return {
    port: "port",
    octetTotalCount: Math.ceil(Math.random()*(arrayRange))
  };
}

///////////////////////////////////////////////////////////
// CREATE VIS & GROUPS ////////////////////////////////////
///////////////////////////////////////////////////////////

var vis = d3.select("#pie-chart").append("svg:svg")
  .attr("width", w)
  .attr("height", h);

//GROUP FOR ARCS/PATHS
var arc_group = vis.append("svg:g")
  .attr("class", "arc")
  .attr("transform", "translate(" + (w/2) + "," + (h/2) + ")");

//GROUP FOR LABELS
var label_group = vis.append("svg:g")
  .attr("class", "label_group")
  .attr("transform", "translate(" + (w/2) + "," + (h/2) + ")");

//GROUP FOR CENTER TEXT  
var center_group = vis.append("svg:g")
  .attr("class", "center_group")
  .attr("transform", "translate(" + (w/2) + "," + (h/2) + ")");

//PLACEHOLDER GRAY CIRCLE
var paths = arc_group.append("svg:circle")
    .attr("fill", "#EFEFEF")
    .attr("r", r);

///////////////////////////////////////////////////////////
// CENTER TEXT ////////////////////////////////////////////
///////////////////////////////////////////////////////////

//WHITE CIRCLE BEHIND LABELS
var whiteCircle = center_group.append("svg:circle")
  .attr("fill", "white")
  .attr("r", ir);

// "TOTAL" LABEL
var totalLabel = center_group.append("svg:text")
  .attr("class", "label")
  .attr("dy", -15)
  .attr("text-anchor", "middle") // text-align: right
  .text("MILES");

//TOTAL TRAFFIC VALUE
var totalValue = center_group.append("svg:text")
  .attr("class", "total")
  .attr("dy", 7)
  .attr("text-anchor", "middle") // text-align: right
  .text("Waiting...");

//UNITS LABEL
var totalUnits = center_group.append("svg:text")
  .attr("class", "units")
  .attr("dy", 21)
  .attr("text-anchor", "middle") // text-align: right
  .text("mi");


///////////////////////////////////////////////////////////
// STREAKER CONNECTION ////////////////////////////////////
///////////////////////////////////////////////////////////

var updateInterval = window.setInterval(update, 2500);

// to run each time data is generated
function update() {

  arraySize = Math.ceil(Math.random()*10);
  streakerDataAdded = d3.range(arraySize).map(fillArray);

  oldPieData = filteredPieData;
  pieData = donut(streakerDataAdded);

  var totalOctets = 0;
  filteredPieData = pieData.filter(filterData);
  function filterData(element, index, array) {
    element.name = streakerDataAdded[index].port;
    element.value = streakerDataAdded[index].octetTotalCount;
    totalOctets += element.value;
    return (element.value > 0);
  }

  if(filteredPieData.length > 0 && oldPieData.length > 0){

    //REMOVE PLACEHOLDER CIRCLE
    arc_group.selectAll("circle").remove();

    totalValue.text(function(){
      var kb = totalOctets/1024;
      return kb.toFixed(1);
      //return bchart.label.abbreviated(totalOctets*8);
    });

    //DRAW ARC PATHS
    paths = arc_group.selectAll("path").data(filteredPieData);
    paths.enter().append("svg:path")
      .attr("stroke", "white")
      .attr("stroke-width", 0.5)
      .attr("fill", function(d, i) { return color(i); })
      .transition()
        .duration(tweenDuration)
        .attrTween("d", pieTween);
    paths
      .transition()
        .duration(tweenDuration)
        .attrTween("d", pieTween);
    paths.exit()
      .transition()
        .duration(tweenDuration)
        .attrTween("d", removePieTween)
      .remove();

    //DRAW TICK MARK LINES FOR LABELS
    lines = label_group.selectAll("line").data(filteredPieData);
    lines.enter().append("svg:line")
      .attr("x1", 0)
      .attr("x2", 0)
      .attr("y1", -r-3)
      .attr("y2", -r-8)
      .attr("stroke", "gray")
      .attr("transform", function(d) {
        return "rotate(" + (d.startAngle+d.endAngle)/2 * (180/Math.PI) + ")";
      });
    lines.transition()
      .duration(tweenDuration)
      .attr("transform", function(d) {
        return "rotate(" + (d.startAngle+d.endAngle)/2 * (180/Math.PI) + ")";
      });
    lines.exit().remove();

    //DRAW LABELS WITH PERCENTAGE VALUES
    valueLabels = label_group.selectAll("text.value").data(filteredPieData)
      .attr("dy", function(d){
        if ((d.startAngle+d.endAngle)/2 > Math.PI/2 && (d.startAngle+d.endAngle)/2 < Math.PI*1.5 ) {
          return 5;
        } else {
          return -7;
        }
      })
      .attr("text-anchor", function(d){
        if ( (d.startAngle+d.endAngle)/2 < Math.PI ){
          return "beginning";
        } else {
          return "end";
        }
      })
      .text(function(d){
        var percentage = (d.value/totalOctets)*100;
        return percentage.toFixed(1) + "%";
      });

    valueLabels.enter().append("svg:text")
      .attr("class", "value")
      .attr("transform", function(d) {
        return "translate(" + Math.cos(((d.startAngle+d.endAngle - Math.PI)/2)) * (r+textOffset) + "," + Math.sin((d.startAngle+d.endAngle - Math.PI)/2) * (r+textOffset) + ")";
      })
      .attr("dy", function(d){
        if ((d.startAngle+d.endAngle)/2 > Math.PI/2 && (d.startAngle+d.endAngle)/2 < Math.PI*1.5 ) {
          return 5;
        } else {
          return -7;
        }
      })
      .attr("text-anchor", function(d){
        if ( (d.startAngle+d.endAngle)/2 < Math.PI ){
          return "beginning";
        } else {
          return "end";
        }
      }).text(function(d){
        var percentage = (d.value/totalOctets)*100;
        return percentage.toFixed(1) + "%";
      });

    valueLabels.transition().duration(tweenDuration).attrTween("transform", textTween);

    valueLabels.exit().remove();


    //DRAW LABELS WITH ENTITY NAMES
    nameLabels = label_group.selectAll("text.units").data(filteredPieData)
      .attr("dy", function(d){
        if ((d.startAngle+d.endAngle)/2 > Math.PI/2 && (d.startAngle+d.endAngle)/2 < Math.PI*1.5 ) {
          return 17;
        } else {
          return 5;
        }
      })
      .attr("text-anchor", function(d){
        if ((d.startAngle+d.endAngle)/2 < Math.PI ) {
          return "beginning";
        } else {
          return "end";
        }
      }).text(function(d){
        return d.name;
      });

    nameLabels.enter().append("svg:text")
      .attr("class", "units")
      .attr("transform", function(d) {
        return "translate(" + Math.cos(((d.startAngle+d.endAngle - Math.PI)/2)) * (r+textOffset) + "," + Math.sin((d.startAngle+d.endAngle - Math.PI)/2) * (r+textOffset) + ")";
      })
      .attr("dy", function(d){
        if ((d.startAngle+d.endAngle)/2 > Math.PI/2 && (d.startAngle+d.endAngle)/2 < Math.PI*1.5 ) {
          return 17;
        } else {
          return 5;
        }
      })
      .attr("text-anchor", function(d){
        if ((d.startAngle+d.endAngle)/2 < Math.PI ) {
          return "beginning";
        } else {
          return "end";
        }
      }).text(function(d){
        return d.name;
      });

    nameLabels.transition().duration(tweenDuration).attrTween("transform", textTween);

    nameLabels.exit().remove();
  }  
}

///////////////////////////////////////////////////////////
// FUNCTIONS //////////////////////////////////////////////
///////////////////////////////////////////////////////////

// Interpolate the arcs in data space.
function pieTween(d, i) {
  var s0;
  var e0;
  if(oldPieData[i]){
    s0 = oldPieData[i].startAngle;
    e0 = oldPieData[i].endAngle;
  } else if (!(oldPieData[i]) && oldPieData[i-1]) {
    s0 = oldPieData[i-1].endAngle;
    e0 = oldPieData[i-1].endAngle;
  } else if(!(oldPieData[i-1]) && oldPieData.length > 0){
    s0 = oldPieData[oldPieData.length-1].endAngle;
    e0 = oldPieData[oldPieData.length-1].endAngle;
  } else {
    s0 = 0;
    e0 = 0;
  }
  var i = d3.interpolate({startAngle: s0, endAngle: e0}, {startAngle: d.startAngle, endAngle: d.endAngle});
  return function(t) {
    var b = i(t);
    return arc(b);
  };
}

function removePieTween(d, i) {
  s0 = 2 * Math.PI;
  e0 = 2 * Math.PI;
  var i = d3.interpolate({startAngle: d.startAngle, endAngle: d.endAngle}, {startAngle: s0, endAngle: e0});
  return function(t) {
    var b = i(t);
    return arc(b);
  };
}

function textTween(d, i) {
  var a;
  if(oldPieData[i]){
    a = (oldPieData[i].startAngle + oldPieData[i].endAngle - Math.PI)/2;
  } else if (!(oldPieData[i]) && oldPieData[i-1]) {
    a = (oldPieData[i-1].startAngle + oldPieData[i-1].endAngle - Math.PI)/2;
  } else if(!(oldPieData[i-1]) && oldPieData.length > 0) {
    a = (oldPieData[oldPieData.length-1].startAngle + oldPieData[oldPieData.length-1].endAngle - Math.PI)/2;
  } else {
    a = 0;
  }
  var b = (d.startAngle + d.endAngle - Math.PI)/2;

  var fn = d3.interpolateNumber(a, b);
  return function(t) {
    var val = fn(t);
    return "translate(" + Math.cos(val) * (r+textOffset) + "," + Math.sin(val) * (r+textOffset) + ")";
  };
}
/* 
var currentMiles, targetMiles, remainingMiles, averageDailyMiles;
  var today = new Date();
  var diffDays;
  var m_names = new Array("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sept", "Oct", "Nov", "Dec");

  var curr_date = today.getDate();
  var curr_month = today.getMonth();
  var curr_year = today.getFullYear();
  $("#todayDate").html("<p>Today is " + m_names[curr_month] + ". " + curr_date + ", " + curr_year + "</p>");

  $("#leaseDate").datepicker();
  var resultString = "";
  var daysLeft = function() {
    var a = $( "#leaseDate" ).datepicker('getDate').getTime();
    var tempDate = new Date(a);
    localStorage.setItem('endDate', tempDate.toDateString());
    var b = today.getTime();
    var c = 24*60*60*1000, // hours per day, minutes per hour, seconds per minute, ms per sec
    diffDays = Math.round((a - b)/c);
    if (diffDays < 0 ) {
      resultString = "<p>Please pick a date in the future.</p>";
    } else {
      resultString = ("<p>You have " + diffDays + " days left on your lease.</p>");
      localStorage.setItem('daysLeft', diffDays);
    } return diffDays;
  };

  $("#leaseDate").on("change", function(){
    daysLeft();
    $("#result").html(resultString);
  });

  $("#currentMiles").on("change", function(){
    currentMiles = $("#currentMiles").val();
    if (targetMiles) { 
      targetMiles = $("#targetMiles").val();
      remainingMiles = (targetMiles - currentMiles);
      averageDailyMiles = Math.round(remainingMiles/daysLeft());
      $("#answer").html("<p>You need to drive less than  " + averageDailyMiles + " miles per day.</p>");
    } else { 
      return;
    }
  });

  $("#targetMiles").on("change", function(){
    targetMiles = $("#targetMiles").val();
    if (currentMiles) { 
      currentMiles = $("#currentMiles").val();
      remainingMiles = (targetMiles - currentMiles);
      averageDailyMiles = Math.round(remainingMiles/daysLeft());
      $("#answer").html("<p>You need to drive less than  " + averageDailyMiles + " miles per day.</p>");
    } else { 
      return;
    }
  });

  $('#submitButton').on('click', function(){
    localStorage.setItem('currentMiles', currentMiles);
    localStorage.setItem('targetMiles', targetMiles);
    localStorage.setItem('averageDailyMiles', averageDailyMiles);
  });

  $(document).ready(function() {
      $('#nav_index').addClass("active");
    if (localStorage.daysLeft) {
        $("#result").html("<p>You entered an end date of " + localStorage.endDate + "</p><p>You have " + localStorage.daysLeft + " days remaining on your lease.</p>");
      };
      if(localStorage.averageDailyMiles) {
        $("#answer").html("<p>Your current mileage is " + localStorage.currentMiles + " and your lease ends at " + localStorage.targetMiles + " miles so you need to drive less than  " + localStorage.averageDailyMiles + " miles per day.</p>");
      };
      if(localStorage.commuteStart) {
        $("#commute").html("<p>Your daily commute begins at " + localStorage.commuteStart + " and ends at " + localStorage.commuteEnd + " for a distance of " + localStorage.commuteDistance + " each way.</p>")
      }
  });
*/
  </script>

</body>
</html>

	
  <script type="text/javascript">
      $(document).ready(function() {
          $('#nav_index').removeClass("active");
          $('#nav_dashboard').addClass("active");
      });
  </script>
  <!-- Bootstrap core JavaScript
  ================================================== -->
  <!-- Placed at the end of the document so the pages load faster -->
  <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
  <!-- <script src="https://code.jquery.com/jquery.js"></script> -->
  <!-- Latest compiled and minified JavaScript -->
    
</body>
</html>